{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90a5b0a3-7ed2-432c-b763-bbbe0d48d60e",
   "metadata": {},
   "outputs": [],
   "source": [
    "%autosave 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d469ea16-7ede-47d2-9cc5-e53a318f8bea",
   "metadata": {},
   "outputs": [],
   "source": [
    "#imports\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from scipy import stats\n",
    "from pydataset import data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d0bf0def-7730-44b9-89fb-39da2a9d0d71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day</th>\n",
       "      <th>time</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.99</td>\n",
       "      <td>1.01</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10.34</td>\n",
       "      <td>1.66</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21.01</td>\n",
       "      <td>3.50</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>23.68</td>\n",
       "      <td>3.31</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>24.59</td>\n",
       "      <td>3.61</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   total_bill   tip     sex smoker  day    time  size\n",
       "1       16.99  1.01  Female     No  Sun  Dinner     2\n",
       "2       10.34  1.66    Male     No  Sun  Dinner     3\n",
       "3       21.01  3.50    Male     No  Sun  Dinner     3\n",
       "4       23.68  3.31    Male     No  Sun  Dinner     2\n",
       "5       24.59  3.61  Female     No  Sun  Dinner     4"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tips = data('tips')\n",
    "tips.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f2ad558-0d3e-4fe2-a3ef-dafb0e638a0b",
   "metadata": {},
   "source": [
    "$H_0$: Size 2 parties tip same amount as any party in my dataset.\n",
    "\n",
    "$H_a$: Size 2 parties tip a different amount from any party in my dataset\n",
    "\n",
    "This will be a one (1) sample, 2-tailed t-test! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "73fe33e2-3474-4849-977a-e3b74de9a627",
   "metadata": {},
   "outputs": [],
   "source": [
    "#define population mean\n",
    "overall_tip = tips.tip.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a9d028cf-828c-4d49-94a4-d5bd821230e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define sample distribution\n",
    "two_tip = tips[tips['size'] == 2].tip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a53b1c3c-f318-446b-8bcd-e4237a2059db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1      1.01\n",
       "4      3.31\n",
       "7      2.00\n",
       "9      1.96\n",
       "10     3.23\n",
       "11     1.71\n",
       "13     1.57\n",
       "15     3.02\n",
       "16     3.92\n",
       "21     4.08\n",
       "22     2.75\n",
       "23     2.23\n",
       "25     3.18\n",
       "27     2.00\n",
       "28     2.00\n",
       "29     4.30\n",
       "30     3.00\n",
       "31     1.45\n",
       "33     3.00\n",
       "35     3.27\n",
       "42     2.54\n",
       "43     3.06\n",
       "44     1.32\n",
       "46     3.00\n",
       "47     5.00\n",
       "50     3.00\n",
       "51     2.50\n",
       "52     2.60\n",
       "54     1.56\n",
       "56     3.51\n",
       "58     1.50\n",
       "59     1.76\n",
       "61     3.21\n",
       "62     2.00\n",
       "63     1.98\n",
       "67     2.47\n",
       "69     2.01\n",
       "70     2.09\n",
       "71     1.97\n",
       "73     3.14\n",
       "74     5.00\n",
       "75     2.20\n",
       "76     1.25\n",
       "77     3.08\n",
       "79     3.00\n",
       "80     2.71\n",
       "81     3.00\n",
       "82     3.40\n",
       "84     5.00\n",
       "85     2.03\n",
       "87     2.00\n",
       "88     4.00\n",
       "89     5.85\n",
       "90     3.00\n",
       "91     3.00\n",
       "92     3.50\n",
       "93     1.00\n",
       "94     4.30\n",
       "95     3.25\n",
       "97     4.00\n",
       "98     1.50\n",
       "99     3.00\n",
       "100    1.50\n",
       "101    2.50\n",
       "102    3.00\n",
       "104    3.48\n",
       "105    4.08\n",
       "106    1.64\n",
       "107    4.06\n",
       "108    4.29\n",
       "109    3.76\n",
       "110    4.00\n",
       "111    3.00\n",
       "114    2.55\n",
       "116    3.50\n",
       "118    1.50\n",
       "119    1.80\n",
       "121    2.31\n",
       "122    1.68\n",
       "123    2.50\n",
       "124    2.00\n",
       "125    2.52\n",
       "127    1.48\n",
       "128    2.00\n",
       "129    2.00\n",
       "131    1.50\n",
       "132    2.83\n",
       "133    1.50\n",
       "134    2.00\n",
       "135    3.25\n",
       "136    1.25\n",
       "137    2.00\n",
       "138    2.00\n",
       "139    2.00\n",
       "140    2.75\n",
       "141    3.50\n",
       "145    2.30\n",
       "146    1.50\n",
       "148    1.63\n",
       "149    1.73\n",
       "150    2.00\n",
       "151    2.50\n",
       "152    2.00\n",
       "159    2.61\n",
       "162    2.50\n",
       "164    2.00\n",
       "165    3.00\n",
       "167    2.24\n",
       "169    1.61\n",
       "170    2.00\n",
       "172    3.16\n",
       "173    5.15\n",
       "174    3.18\n",
       "175    4.00\n",
       "176    3.11\n",
       "177    2.00\n",
       "178    2.00\n",
       "179    4.00\n",
       "180    3.55\n",
       "182    5.65\n",
       "185    3.00\n",
       "191    1.50\n",
       "192    4.19\n",
       "193    2.56\n",
       "194    2.02\n",
       "195    4.00\n",
       "196    1.44\n",
       "197    2.00\n",
       "199    2.00\n",
       "200    2.00\n",
       "202    2.01\n",
       "203    2.00\n",
       "204    2.50\n",
       "209    2.03\n",
       "210    2.23\n",
       "214    2.50\n",
       "216    1.10\n",
       "218    1.50\n",
       "219    1.44\n",
       "221    2.20\n",
       "222    3.48\n",
       "225    1.58\n",
       "226    2.50\n",
       "227    2.00\n",
       "229    2.72\n",
       "230    2.88\n",
       "233    3.39\n",
       "234    1.47\n",
       "235    3.00\n",
       "236    1.25\n",
       "237    1.00\n",
       "238    1.17\n",
       "241    2.00\n",
       "242    2.00\n",
       "243    1.75\n",
       "244    3.00\n",
       "Name: tip, dtype: float64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "two_tip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "973684d0-6421-49b1-84c4-783adec63e14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-5.271912239283316, 4.4632473980137726e-07)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_two , p_two = stats.ttest_1samp(two_tip, overall_tip)\n",
    "t_two , p_two"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1d32fd5c-c1f0-43f2-90d5-66686f65ff4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(tips.tip, label = 'population')\n",
    "plt.hist(two_tip, label= 'party of two')\n",
    "#vline is the mean of the overall population\n",
    "plt.vlines(overall_tip, 0, 80, color = 'firebrick')\n",
    "plt.xlabel('tip amount')\n",
    "plt.ylabel('frequency')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "75091a2e-99cb-4d22-b309-5a2d5c33dd6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We reject the null hypothesis.\n"
     ]
    }
   ],
   "source": [
    "a = 0.05\n",
    "\n",
    "if p_two < a:\n",
    "    print('We reject the null hypothesis.')\n",
    "else:\n",
    "    print('We fail to reject the null hypothesis.')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a67eb58d-5cd4-4ea1-a9bf-a2b3fbda71c5",
   "metadata": {},
   "source": [
    "We reject the null hypothesis because the p score is less than the a value."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3455bbd5-29b3-485e-bbac-3389e9a70b03",
   "metadata": {},
   "source": [
    "$H_0$: Guests for dinner play less than or the same amount as guests for lunch.\n",
    "\n",
    "$H_a$: Guests for dinner pay more than guests for lunch.\n",
    "\n",
    "This will be a 2-sampled, 1-tailed t-test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d99ffc5a-80f7-4fdb-a4f8-b31ffd03aab6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Dinner', 'Lunch'], dtype=object)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tips.time.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0a8054e1-b2ad-4f17-b48d-97dabf5e8bbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "lunch_bills = tips[tips.time == 'Lunch'].total_bill"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "07f86b99-67b0-49aa-ab5f-c31e5747db23",
   "metadata": {},
   "outputs": [],
   "source": [
    "dinner_bills = tips[tips.time == 'Dinner'].total_bill"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4b067ecb-1fa9-47e8-a655-52e505cd969a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(lunch_bills, label= 'Lunch')\n",
    "plt.hist(dinner_bills, label='Dinner', alpha = 0.4)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4d1fe98b-b0d4-431a-98e3-ada9451d6476",
   "metadata": {},
   "outputs": [],
   "source": [
    "t_time , p_time = stats.ttest_ind(dinner_bills, lunch_bills)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6e2a71da-ef70-4e30-ade1-e505aaa07690",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We reject the null hypothesis.\n"
     ]
    }
   ],
   "source": [
    "a = 0.05\n",
    "\n",
    "\n",
    "if (t_time >0) and (p_time / 2 < a) :\n",
    "    print('We reject the null hypothesis.')\n",
    "else:\n",
    "    print('We fail to reject the null hypothesis.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "dedca545-5144-45e8-82a1-5ab8754f21a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TtestResult(statistic=-2.8976375218366424, pvalue=0.004104621407595674, df=242.0)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.ttest_ind(lunch_bills, dinner_bills)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
